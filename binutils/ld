#!/bin/sh
#
# Copyright 2006, 2007 by Brian Dominy <brian@oddchange.com>
#
# Changes by David Flamand <dflamand@gmail.com> (May 2016)
#  - added more options, more robust and verbose in case of error
#
# This file is part of GCC6809.
#
# GCC6809 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# GCC6809 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GCC6809; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

# This script is a frontend to the aslink object linker, to make it
# look more like GNU ld.  Not all ld features are supported here.
# It basically translates ld style options into aslink format.

set -e
IFS=' '

as_prefix=@AS_PREFIX@
bindir=${as_prefix}/bin

# Output a message to stderr and optionally exit with a code.
msg ()
{
	text="ld (m6809)"
	if [ -n "$1" ]; then
		text="$text: $1"
	fi
	echo "$text" 1>&2
	shift
	if [ $# -gt 0 ]; then
		exit $1
	fi
}

# Check if a given filename will survive a variable expansion.
checkfilename ()
{
	MSG=$1; shift
	OIFS=$IFS; IFS=/
	A=$1; shift; B=$*
	IFS=$OIFS
	if [ -n "$A" -a "$A" = "$B" ]; then
		return
	fi
	msg "$MSG '$A'" 1
}

# Set output format.
setformat ()
{
	case $1 in
		s19)
			aslink_options="${aslink_options}o"
			exe_suffix=$1
			;;
		bin)
			aslink_options="${aslink_options}t"
			exe_suffix=$1
			;;
		*)
			msg "unrecognized output format '$1'" 1
			;;
	esac
}

# Set defaults.  Some are based on the target type, which is 
# determined by the name by which the program was invoked.
aslink_options=-nwxs
exe_suffix=
options=
target=
case $0 in
	*m6809-coco-*)
		options="-b .text=0x2000 -b .data=0x7000 -b .bss=0x7C00 -b .ctors=0x7F00 -b .dtors=0x7F80 -b .vector=0x7FF0"
		target=coco
		setformat bin
		LD_NOARGS=X
		;;
	*m6809-sim-*)
		options="-b .text=0x10 -b .vector=0xFFF0"
		target=sim
		setformat s19
		LD_NOARGS=X
		;;
	*)
		options="-b .vector=0xFFF0"
		target=unknown
		setformat s19
		LD_NOARGS=X # default to noargs for now
		;;
esac

# Parse and translate command-line options.
output_file=a.out
args=
asmap_file=
asout_file=
crt0_file=
gen_map_file=
input_files=
libpaths=
libs=
map_file=
noargs=
verbose=
while [ $# -gt 0 ]; do
	arg=$1; shift
	case $arg in
		-o|--output)
			output_file=$1; shift
			;;
		--output=*)
			output_file=${arg#*=}
			;;
		-L|--library-path)
			path=$1; shift
			checkfilename "invalid library path" "$path" $path
			libpaths="$libpaths -k $path/"
			;;
		-L*)
			path=${arg#-L}
			checkfilename "invalid library path" "$path" $path
			libpaths="$libpaths -k $path/"
			;;
		--library-path=*)
			path=${arg#*=}
			checkfilename "invalid library name" "$path" $path
			libpaths="$libpaths -k $path/"
			;;
		-l|--library)
			name=$1; shift
			checkfilename "invalid library name" "$name" $name
			libs="$libs -l as-lib$name.a"
			;;
		-l*)
			name=${arg#-l}
			checkfilename "invalid library name" "$name" $name
			libs="$libs -l as-lib$name.a"
			;;
		--library=*)
			name=${arg#*=}
			checkfilename "invalid library name" "$name" $name
			libs="$libs -l as-lib$name.a"
			;;
		--section-start)
			options="$options -b $1"; shift
			;;
		--section-start=*)
			options="$options -b ${arg#*=}"
			;;
		--defsym)
			options="$options -g $1"; shift
			;;
		--defsym=*)
			options="$options -g ${arg#*=}"
			;;
		--oformat)
			setformat "$1"; shift
			;;
		--oformat=*)
			setformat "${arg#*=}"
			;;
		-Tbss)
			options="$options -b .bss=$1"; shift
			;;
		-Tdata)
			options="$options -b .data=$1"; shift
			;;
		-Ttext)
			options="$options -b .text=$1"; shift
			;;
		--verbose)
			verbose=X
			;;
		-g)
			# Ignored by GNU ld; we should do the same
			true
			;;
		-v|--version)
			msg ""
			;;
		--help)
			msg "" 0
			;;
		-T)
			options="$options -f $1"; shift
			;;
		-Map|--Map)
			map_file=$1; shift
			gen_map_file=X
			;;
		-Map=*|--Map=*)
			map_file=${arg#*=}
			gen_map_file=X
			;;
##########################################################
# these are custom linker options (no GNU ld equivalent) #
		-gn)
			# Generate NoICE debug file
			aslink_options="${aslink_options}j"
			;;
		-gs)
			# Generate SDCC debug file
			aslink_options="${aslink_options}y"
			;;
		--map)
			# Generate map file
			gen_map_file=X
			;;
		--args)
			# Prototype of main():
			#  if supplied main() prototype is
			#    int main(int argc, char **argc)
			#  if not supplied main() prototype is
			#    int main(void)
			args=X
			;;
		--noargs)
			# The inverse of the above
			noargs=X
			;;
##########################################################
		-*)
			msg "unrecognized option '$arg'" 1
			;;
		*/crt0.o|crt0.o)
			if [ -n "$crt0_file" ]; then
				msg "more than one crt0.o given" 1
			fi
			crt0_file=$arg
			;;
		*)
			checkfilename "invalid input file name" "$arg" $arg
			if [ "${arg%.*}" = "$arg" ]; then
				msg "input file '$arg' without extension" 1
			fi
			input_files="$input_files $arg"
			;;
	esac
done

asout_file=${output_file%\.*}.$exe_suffix
asmap_file=${asout_file%\.*}.map
if [ -z "$map_file" ]; then
	map_file=${output_file%\.*}.map
fi
if [ -n "$gen_map_file" ]; then
	aslink_options="${aslink_options}m"
fi

# Handle --noargs and --args option.
if [ -n "$args" ]; then
	noargs=
elif [ -z "$noargs" ]; then
	noargs=$LD_NOARGS # from target or from environment variable
fi
# $noargs non-empty, so define __argc and __argv to NULL.
if [ -n "$noargs" ]; then
	options="$options -g __argc=0 -g __argv=0"
fi

# Output some information when --verbose option is set.
if [ -n "$verbose" ]; then
	echo "$bindir/aslink $aslink_options $options $asout_file $crt0_file $input_files $libpaths $libs"
	echo "Target: '$target'"
	echo "Output format: '$exe_suffix'"
	echo "Output file: '$output_file'"
	if [ -n "$gen_map_file" ]; then
		echo "Map file: '$map_file'"
	fi
	if [ -z "$input_files" ]; then
		exit 0
	fi
fi

if [ -z "$input_files" ]; then
	msg "no input files" 1
fi

set +e

if [ -n "$gen_map_file" ]; then
	rm -f "$asmap_file"
fi

# Run the real linker with translated options.
$bindir/aslink $aslink_options $options "$asout_file" "$crt0_file" $input_files $libpaths $libs
rc=$?

if [ "$rc" != "0" ]; then
	rm -f "$asout_file"
	if [ -n "$gen_map_file" ]; then
		rm -f "$asmap_file"
	fi
	exit $rc
fi

set -e

if [ "$asout_file" != "$output_file" ]; then
	mv "$asout_file" "$output_file"
fi

if [ -n "$gen_map_file" -a "$asmap_file" != "$map_file" ]; then
	mv "$asmap_file" "$map_file"
fi

exit 0
