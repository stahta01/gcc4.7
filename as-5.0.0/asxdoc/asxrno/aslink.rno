.comment;aslink.rno

.chapter;The Linker


.header level 1;ASLINK Relocating Linker

ASLINK is the companion linker for the ASxxxx assemblers.  The
linker supports versions 3.xx and 4.xx of the ASxxxx assemblers.
Object files from version 3 and 4 may be freely mixed while
linking.  Note that version 3 object files contain only a subset
of the options available in version 4.

The program ASLINK is a general relocating linker performing the
following functions:

.list 1
.list element
Bind multiple object modules into a single memory image
.list element
Resolve inter-module symbol references 
.list element
Combine code belonging to the same area from multiple object files
into a single contiguous memory region
.list element
Search and import object module libraries for undefined global variables
.list element
Perform byte and word program counter relative (pc#or#pcr) addressing
calculations
.list element
Define absolute symbol values at link time
.list element
Define absolute area base address values at link time
.list element
Produce Intel Hex, Motorola S, or Tandy CoCo Disk Basic output files
.list element
Produce a map of the linked memory image
.list element
Produce an updated listing file with the relocated addresses and data
.end list


.header level 1;INVOKING ASLINK

Starting ASlink without any arguments provides the following
option list and then exits:

.skip
.literal
Usage: [-Options] [-Option with arg] outfile file [file ...]
  -p   Echo commands to stdout (default)
  -n   No echo of commands to stdout
Alternates to Command Line Input:
  -c                   ASlink >> prompt input
  -f   file[.lnk]      Command File input
Librarys:
  -k   Library path specification, one per -k
  -l   Library file specification, one per -l
Relocation:
  -b   area base address=expression
  -g   global symbol=expression
Map format:
  -m   Map output generated as outfile[.map]
  -w   Wide listing format for map file
  -x   Hexidecimal (default)
  -d   Decimal
  -q   Octal
Output:
  -i   Intel Hex as outfile[.i--]
  -s   Motorola S Record as outfile[.s--]
  -t   Tandy CoCo Disk BASIC binary as outfile[.bi-]
  -j   NoICE Debug output as outfile[.noi]
  -y   SDCDB Debug output as outfile[.cdb]
  -o   Linked file/library object output enable (default)
  -v   Linked file/library object output disable
List:
  -u   Update listing file(s) with link data as file(s)[.rst]
Case Sensitivity:
  -z   Disable Case Sensitivity for Symbols
End:
  -e   or null line terminates input
.end literal

.skip 2
.note
When ASlink is invoked with a single filename
the created output file will have the same
filename as the .rel file.

.skip 1
When ASlink is invoked with multiple filenames
the first filename is the output filename and
the remaining  filenames are linked together
into the output filename.
.end note

.skip 2
Most sytems require the options to be entered on the command line:
   
.skip
.literal
  aslink [-Options] [-Options with args] iofile

  aslink [-Options] [-Options with args] ofile ifile [ifile ...]
.end literal

.skip 2
Some systems may request the arguments after the linker is
started at a system specific prompt:

.skip
.literal
  aslink
  argv: -[options] -[option arg] file

  aslink
  argv: [-Options] [-Options with args] ofile ifile [ifile ...]
.end literal

.skip 2
The linker commands are explained in some more detail:

.list 1
.list element
-c########ASlink#>> prompt mode.
.break
The ASlink#>> prompt mode reads linker commands
from stdin.
.list element
-f#file###Command file mode.
.break
The command file mode imports linker commands from the
specified file (extension must be .lnk), imported -c and -f commands
are ignored.  If the directory path, for a file to be linked,
is not specified in the command file then the path defaults to the .lnk
file directory path.
.list element
-p/-n#####enable/disable echoing commands to stdout.
.list element
-i/-s/-t##Intel Hex (file.i--), Motorola S (file.s--), or
Tandy Color Computer Disk Basic (file.bi-) image output
file.
.list element
-o/-v#####Specifies that subsequent linked files/libraries will
generate object output (default) or suppress object output.
(if option -i, -s, or -t was specified)
.list element
-z########Disable Case Sensitivity for Symbols
.list element
-m########Generate a map file (file.map). This file contains a list
of the symbols (by area) with absolute addresses, sizes of linked
areas, and other linking information.
.list element
-w########Specifies that a wide listing format be used for the map file.
.list element
-xdq######Specifies the number radix for the map file (Hexidecimal, Decimal,
or Octal).
.list element
-u########Generate an updated listing file (file.rst) derived from
the relocated addresses and data from the linker.
.list element
file######File(s) to be linked. Files may be on the same line as the above
options or on a separate line(s) one file per line or multiple files
separated by spaces or tabs.
.list element
-b##area=expression
.break
(one definition per line in a linker command file.)
.break
This specifies an area base address where the expression may contain
constants and/or defined symbols from the linked files.
.list element
-g##symbol=expression
.break
(one definition per line in a linker command file.)
.break
This specifies the value for the symbol where the expression may contain
constants and/or defined symbols from the linked files.
.list element
-k##library directory path
.break
(one definition per line in a linker command file.)
.break
This specifies one possible path to an object library. More than
one path is allowed.
.list element
-l##library file specification
.break
(one definition per line in a linker command file.)
.break
This specifies a possible library file.  More than one file is
allowed.
.list element
-e##or null line, terminates input to the linker.
.end list


.header level 1;LIBRARY PATH(S) AND FILE(S)

The process of resolving undefined symbols after scanning
the input object files includes the scanning of object module
libraries.  The linker will search through all combinations of the
library path specifications (input by the -k option) and the
library file specifications (input by the -l option) that
lead to an existing library file.  Each library file contains a
list (one file per line) of modules included in this particular
library.  Each existing object module is scanned for a match to the
undefined symbol.  The first module containing the symbol is then
linked with the previous modules to resolve the symbol definition.
The library object modules are rescanned until no more
symbols can be resolved.  The scanning algorithm allows resolution
of back references.  No errors are reported for non existant
library files or object modules.

The library file specification may be formed in one of two ways:
.list 1
.list element
If the library file contained an absolute
path/file specification then this is the
object module's path/file.
.break
(i.e. C:_\... or C:_/...)
.list element
If the library file contains a relative path/file
specification then the concatenation of the path
and this file specification becomes the object module's
path/file.
.break
(i.e. _\... or _/...)
.end list

As an example, assume there exists a library file termio.lib
in the syslib directory specifying the following object modules:
.skip
_\6809_\io__disk########first object module
.break
d:_\special_\io__comm###second object module
.skip
and the following parameters were specified to the linker:
.skip
-k c:_\iosystem_\####the first path
.break
-k c:_\syslib_\######the second path
.skip
-l termio##########the first library file
.break
-l io##############the second library file (no such file)
.skip
The linker will attempt to use the following object modules
to resolve any undefined symbols:
.skip
c:_\syslib_\6809_\io__disk.rel#####(concatenated path/file)
.break
d:_\special_\io__comm.rel#########(absolute path/file)
.skip
all other path(s)/file(s) don't exist. (No errors are reported
for non existant path(s)/file(s).)


.header level 1;ASLINK PROCESSING

The linker processes the files in the order they are presented.
The first pass through the input files is used to define all program
areas, the section area sizes, and symbols defined or referenced.
Undefined symbols will initiate a search of any specified library file(s)
and the importing of the module containing the symbol definition.
After the first pass the -b (area base address) definitions, if any,
are processed and the areas linked.

The area linking proceeds by first examining the area types
ABS, CON, REL, OVR and PAG. Absolute areas (ABS) from separate object modules
are always overlayed and have been assembled at a specific address, these
are not normally relocated (if a -b command is used on an absolute area
the area will be relocated). Relative areas (normally defined as REL|CON)
have a base address of 0x0000 as read from the object files, the -b
command specifies the beginning address of the area. All subsequent
relative areas will be concatenated with proceeding relative areas.
Where specific ordering is desired, the first linker input file
should have the area definitions in the desired order. At the
completion of the area linking all area addresses and lengths have been
determined. The areas of type PAG are verified to be on a 256 byte
boundary and that the length does not exceed 256 bytes. Any errors
are noted on stderr and in the map file.

Next the global symbol definitions (-g option), if any, are processed.
The symbol definitions have been delayed until this point because the
absolute addresses of all internal symbols are known and can be used
in the expression calculations.

Before continuing with the linking process the symbol table is scanned
to determine if any symbols have been referenced but not defined.
Undefined symbols are listed on the stderr device. if a .module directive
was included in the assembled file the module making the reference to
this undefined variable will be printed.

Constants defined as global in more than one module will be flagged as
multiple definitions if their values are not identical.

After the preceeding processes are complete the linker may output a map
file (-m option). This file provides the following information:

.list 1
.list element
Global symbol values and label absolute addresses
.list element
Defined areas and there lengths
.list element
Remaining undefined symbols
.list element
List of modules linked
.list element
List of library modules linked
.list element
List of -b and -g definitions
.end list

.skip 2

The final step of the linking process is performed during the second pass
of the input files. As the xxx.rel files are read the code is relocated
by substituting the physical addresses for the referenced symbols and areas
and may be output in Intel, Motorola, or Tandy CoCo Disk Basic formats.
The number of files
linked and symbols defined/referenced is limited by the processor space
available to build the area/symbol lists.  If the -u option is specified
then the listing files (file.lst) associated with the relocation files
(file.rel) are scanned and used to create a new file (file.rst) which
has all addresses and data relocated to their final values.

The -o/-v options allow the simple creation of loadable or overlay
modules.  Loadable and overlay modules normally need to be
linked with a main module(s) to resolve external symbols.  The
-o/-v options can be used to enable object output for the loadable
or overlay module(s) and suppress the object code from the linked
main module(s).  The -o/-v options can be applied repeatedly to specify
a single linked file, groups of files, or libraries for object code
inclusion or suppression.


.subtitle ;ASXXXX VERSION 4.XX LINKING
.page
.header level 1;ASxxxx Version 4.xx Linking

The linkers' input object file is an ascii file containing
the information needed by the linker to bind multiple object
modules into a complete loadable memory image.

.skip
The object module contains the following designators:
.skip;.literal
	[XDQ][HL][234]
		X	Hexidecimal radix
		D	Decimal radix
		Q	Octal radix

		H	Most significant byte first
		L	Least significant byte first

		2	16-Bit Addressing
		3	24-Bit Addressing
		4	32-Bit Addressing

	H	Header 
	M	Module
	G	Merge Mode
	B	Bank
	A	Area
	S	Symbol
	T	Object code
	R	Relocation information
	P	Paging information
.end literal


.header level 2;Object Module Format

The first line of an object module contains the [XDQ][HL][234] format
specifier (i.e. XH2 indicates a hexidecimal file with most significant
byte first and 16-bit addressing) for the following designators.


.header level 2;Header Line

.indent 8
H aa areas gg global symbols

The header line specifies the number of areas(aa) and the number of
global symbols(gg) defined or referenced in this object module
segment.


.header level 2;Module Line

.indent 8
M name

The module line specifies the module name from which this header segment
was assembled. The module line will not appear if the .module directive
was not used in the source program.


.header level 2;Merge Mode Line

.indent 8
G nn ii 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
 
The mode structure contains the specification (or partial
specification) of one of the assemblers' merge modes.
Sixteen bits may be specified on a single line.
Each assembler must specify at least one merge mode.
The merging specification allows arbitrarily defined active
bits and bit positions.  The 32 element arrays are indexed
from 0 to 31.  Index 0 corresponds to bit 0, ..., and
31 corresponds to bit 31 of a normal integer value.
 
.list 1
.list element
#nn#is merge mode number
.list element
#ii#is the beginning bit position of the following data
.list element
#00#... merge mode bit elements
.end list

.skip
.left margin 20
The value of the element specifies if the normal integer bit
is active (bit <7> is set, 0x80) and what destination bit
(bits <4:0>, 0 - 31) should be loaded with this normal
integer bit.
.left margin 8

.header level 2;Bank Line

.indent 8
B name base nn size nn map nn flags nn fsfx string
 
The B line defines a bank identifier as name. A bank is
a structure containing a collection of areas.
The bank is treated as a unique linking
structure seperate from other banks.  Each bank
can have a unique base address (starting address).  The
size specification may be used to signal the overflow of
the banks' allocated space.  The Linker combines all areas
included within a bank as seperate from other areas.  The
code from a bank may be output to a unique file by
specifying the File Suffix parameter (fsfx).  This allows
the seperation of multiple data and code segments into
isolated output files.  The map parameter is for NOICE
processing.  The flags indicate if the parameters have
been set.
 
 
.header level 2;Area Line

.indent 8
A label size ss flags ff

The area line defines the area label, the size (ss) of the area in
bytes, and the area flags (ff). The area flags specify
the ABS, REL, CON, OVR, and PAG parameters:
.skip
.indent 8
OVR/CON##(0x04/0x00 i.e. bit position 2)
.skip
.indent 8
ABS/REL##(0x08/0x00 i.e. bit position 3)
.skip
.indent 8
PAG######(0x10      i.e. bit position 4)


.header level 2;Symbol Line

.indent 8
S name Defnnnn
.skip
.indent 16
or
.skip
.indent 8
S name Refnnnn


The symbol line defines (Def) or references (Ref) the identifier name
with the value nnnn. The defined value is relative to the current
area base address. References to constants and external global symbols will
always appear before the first area definition. References to external
symbols will have a value of zero.


.header level 2;T Line

.indent 8
T xx xx nn nn nn nn nn ...

The T line contains the assembled code output by the assembler
with xx xx being the offset address from the current area base
address and nn being the assembled instructions and data in byte
format. (xx xx and nn nn can be 2, 3, or 4 bytes as specified
by the .REL file header.)


.header level 2;R Line

.indent 8
R 0 0 nn nn  n1 n2 xx xx  ...

The R line provides the relocation information to the linker.
The nn nn value is the current area index, i.e. which area the
current values were assembled. Relocation information is encoded
in groups of 4 bytes:

.list 1
.list element
n1 is the relocation mode and object format.
.list 0
.list element
bits#<1:0>#specify the number of bytes to output
.list element
bits#<2:3>#normal(0x00)#/###MSB###(0x0C)
.break
###########signed(0x04)#/#unsigned(0x08)
.list element
bit#4##normal(0x00)/page###'0'#(0x10) reference
.list element
bit#5##normal(0x00)/page#'nnn'#(0x20) reference
.break
#######PAGX mode if both bits are set (0x30)
.list element
bit#6##normal(0x00)/PC relative(0x40) relocation
.list element
bit#7##relocatable area(0x00)/symbol(0x80)
.end list 0
.list element
n2 is a byte index and a merge mode index
.list 0
.list element
bits#<3:0> are a byte index into the corresponding
(i.e. preceeding) T line data (i.e.  a pointer to
the data to be updated by the relocation).
.list element
bits#<7:4> are an index into a selected merge mode.
Currently mode 0 simply specifies to use standard
byte processing modes and merging is ignored.
.end list 0
.list element
xx#xx is the area/symbol index for the area/symbol being referenced.
the corresponding area/symbol is found in the header area/symbol lists.
.end list

.skip
The groups of 4 bytes are repeated for each item requiring relocation
in the preceeding T line.


.header level 2;P Line

.indent 8
P 0 0 nn nn  n1 n2 xx xx

The P line provides the paging information to the linker
as specified by a .setdp directive. The format of the relocation
information is identical to that of the R line.  The corresponding
T line has the following information:

.indent 8
T xx xx aa aa bb bb

Where aa#aa is the area reference number which specifies the selected
page area and bb#bb is the base address of the page.  bb#bb will require
relocation processing if the 'n1#n2#xx#xx' is specified in the P line.
The linker will verify that the base address is on a 256 byte boundary
and that the page length of an area defined with the PAG type
is not larger than 256 bytes.

The linker defaults any direct page references to the first area
defined in the input REL file.  All ASxxxx assemblers will specify
the __CODE area first, making this the default page area.


.header level 2;24-Bit and 32-Bit Addressing

When 24-bit or 32-bit addressing is specified in the file
format line [XDQ][HL][234] then the S and T Lines
have modified formats: 

.lit
	S name Defnnnnnn			(24-bit)
	S name Refnnnnnn			(24-bit)
	T xx xx xx nn nn nn nn nn ...		(24-bit)

	S name Defnnnnnnnn			(32-bit)
	S name Refnnnnnnnn			(32-bit)
	T xx xx xx xx nn nn nn nn nn ...	(32-bit)
.end lit

The multibyte formats for byte data replace the 2-byte
form for 16-bit data with 3-byte or 4-byte data for
24-bit or 32-bit data respectively.  The 2nd byte format
(also named MSB) always uses the second byte of the
2, 3, or 4-byte data.


.header level 2;ASlink V4.xx Error Messages

The linker provides detailed error messages allowing the programmer
to quickly find the errant code.  As the linker completes pass#1 over
the input file(s) it reports any page boundary or page length errors
as follows:
.tp 8;.skip
.literal
?ASlink-Warning-Paged Area PAGE0 Boundary Error

and/or

?ASlink-Warning-Paged Area PAGE0 Length Error
.end literal
.skip
where PAGE0 is the paged area.

Also during Pass #1 any bank size (length) errors will be
reported as follows:
.tp 6;.skip
.literal
?ASlink-Warning-Size limit exceeded in bank BANK
.end literal
where BANK is the bank name.

During Pass two the linker reads the T, R, and P lines performing the
necessary relocations and outputting the absolute code.  Various 
errors may be reported during this process

.tp 10
The P line processing can produce only one possible error:
.skip
.literal
?ASlink-Warning-Page Definition Boundary Error
         file        module      pgarea    pgoffset
  PgDef  t6809l      t6809l      PAGE0         0001
.end literal
.skip
The error message specifies the file and module where the .setdp
direct was issued and indicates the page area and the page offset
value determined after relocation.

.tp 10
.skip 2
The R line processing produces various error messages:
.skip
.literal
?ASlink-Warning-Signed value error
?ASlink-Warning-Unsigned value error
?ASlink-Warning-Byte PCR relocation error
?ASlink-Warning-Word PCR relocation error
?ASlink-Warning-3-Byte PCR relocation error
?ASlink-Warning-4-Byte PCR relocation error
?ASlink-Warning-Page0 relocation error
?ASlink-Warning-PageN relocation error
?ASlink-Warning-PageX relocation error
?ASlink-Warning-Signed Merge Bit Range error
?ASlink-Warning-Unsigned/Overflow Merge Bit Range error
.end literal
.skip
These error messages also specify the file, module, area, and
offset within the area of the code referencing (Refby) and
defining (Defin) the symbol:
.skip
.literal
?ASlink-Warning-Signed value error for symbol  two56
         file        module      area        offset
  Refby  t           Pagetest    PROGRAM     0006
  Defin  t           Pagetest    DIRECT      0100
.end literal
.skip
If the symbol is defined in the same module as the
reference the linker is unable to report the symbol name.
The assembler listing file(s) should be examined at the
offset from the specified area to locate the offending code.

The errors are:
.list 1
.list element
The Signed value error indicates an indexing value
exceeded the maximum negative or maximum
positive value for the current variable size.
.list element
The Unsigned value error indicates an indexing value
was greater than maximum positive value for the current
variable size.
.list element
The byte PCR error is caused by exceeding the pc relative byte
branch range.
.list element
The word PCR error is caused by exceeding the pc relative word
branch range.
.list element
The 3-byte PCR error is caused by exceeding the pc relative 3-byte
branch range.
.list element
The 4-byte PCR error is caused by exceeding the pc relative 4-byte
branch range.
.list element
The Page0 error is generated if
the direct page variable is not in the page0 range of 0 to 255.
.list element
The PageN error is generated if
the direct page variable is not within the Nth page range of 0 to 255.
.list element
The PageX error is generated if
the direct page variable is not within the extended page range.
.list element
The Signed Merge Bit Range error indicates an indexing value
exceeded the maximum negative or maximum
positive value for the current signed merge variable size.
.list element
The Unsigned/Overflow Merge Bit Range error indicates an indexing value
was greater than maximum positive value for the current
unsigned merge variable size.
.end list


.subtitle ;ASXXXX VERSION 3.XX LINKING
.page
.header level 1;ASxxxx Version 3.xx Linking

The linkers' input object file is an ascii file containing
the information needed by the linker to bind multiple object
modules into a complete loadable memory image.

.skip
The object module contains the following designators:
.skip;.literal
	[XDQ][HL][234]
		X	Hexidecimal radix
		D	Decimal radix
		Q	Octal radix

		H	Most significant byte first
		L	Least significant byte first

		2	16-Bit Addressing
		3	24-Bit Addressing
		4	32-Bit Addressing

	H	Header 
	M	Module
	A	Area
	S	Symbol
	T	Object code
	R	Relocation information
	P	Paging information
.end literal


.header level 2;Object Module Format

The first line of an object module contains the [XDQ][HL][234] format
specifier (i.e. XH2 indicates a hexidecimal file with most significant
byte first and 16-bit addressing) for the following designators.


.header level 2;Header Line

.indent 8
H aa areas gg global symbols

The header line specifies the number of areas(aa) and the number of
global symbols(gg) defined or referenced in this object module
segment.


.header level 2;Module Line

.indent 8
M name

The module line specifies the module name from which this header segment
was assembled. The module line will not appear if the .module directive
was not used in the source program.


.header level 2;Area Line

.indent 8
A label size ss flags ff

The area line defines the area label, the size (ss) of the area in
bytes, and the area flags (ff). The area flags specify
the ABS, REL, CON, OVR, and PAG parameters:
.skip
.indent 8
OVR/CON##(0x04/0x00 i.e. bit position 2)
.skip
.indent 8
ABS/REL##(0x08/0x00 i.e. bit position 3)
.skip
.indent 8
PAG######(0x10      i.e. bit position 4)


.header level 2;Symbol Line

.indent 8
S name Defnnnn
.skip
.indent 16
or
.skip
.indent 8
S name Refnnnn


The symbol line defines (Def) or references (Ref) the identifier name
with the value nnnn. The defined value is relative to the current
area base address. References to constants and external global symbols will
always appear before the first area definition. References to external
symbols will have a value of zero.


.header level 2;T Line

.indent 8
T xx xx nn nn nn nn nn ...

The T line contains the assembled code output by the assembler
with xx xx being the offset address from the current area base
address and nn being the assembled instructions and data in byte
format.


.header level 2;R Line

.indent 8
R 0 0 nn nn  n1 n2 xx xx  ...

The R line provides the relocation information to the linker.
The nn nn value is the current area index, i.e. which area the
current values were assembled. Relocation information is encoded
in groups of 4 bytes:

.list 1
.list element
n1 is the relocation mode and object format, for the adhoc
extension modes refer to asxxxx.h or aslink.h
.list 0
.list element
bit#0##word(0x00)/byte(0x01)
.list element
bit#1##relocatable area(0x00)/symbol(0x02)
.list element
bit#2##normal(0x00)/PC relative(0x04) relocation
.list element
bit#3##1-byte(0x00)/2-byte(0x08) object format
.list element
bit#4##signed(0x00)/unsigned(0x10) byte data
.list element
bit#5##normal(0x00)/page###'0'(0x20) reference
.list element
bit#6##normal(0x00)/page#'nnn'(0x40) reference
.list element
bit#7##LSB byte(0x00)/MSB byte(0x80)
.end list 0
.list element
n2 is a byte index into the corresponding (i.e. preceeding) T line data
(i.e. a pointer to the data to be updated by the relocation).  The T line
data may be 1-byte or 2-byte byte data format or 2-byte word format.
.list element
xx#xx is the area/symbol index for the area/symbol being referenced.
the corresponding area/symbol is found in the header area/symbol lists.
.end list

.skip
The groups of 4 bytes are repeated for each item requiring relocation
in the preceeding T line.


.header level 2;P Line

.indent 8
P 0 0 nn nn  n1 n2 xx xx

The P line provides the paging information to the linker
as specified by a .setdp directive. The format of the relocation
information is identical to that of the R line.  The corresponding
T line has the following information:

.indent 8
T xx xx aa aa bb bb

Where aa#aa is the area reference number which specifies the selected
page area and bb#bb is the base address of the page.  bb#bb will require
relocation processing if the 'n1#n2#xx#xx' is specified in the P line.
The linker will verify that the base address is on a 256 byte boundary
and that the page length of an area defined with the PAG type
is not larger than 256 bytes.

The linker defaults any direct page references to the first area
defined in the input REL file.  All ASxxxx assemblers will specify
the __CODE area first, making this the default page area.


.header level 2;24-Bit and 32-Bit Addressing

When 24-bit or 32-bit addressing is specified in the file
format line [XDQ][HL][234] then the S and T Lines
have modified formats: 

.lit
	S name Defnnnnnn			(24-bit)
	S name Refnnnnnn			(24-bit)
	T xx xx xx nn nn nn nn nn ...		(24-bit)

	S name Defnnnnnnnn			(32-bit)
	S name Refnnnnnnnn			(32-bit)
	T xx xx xx xx nn nn nn nn nn ...	(32-bit)
.end lit

The multibyte formats for byte data replace the 2-byte
form for 16-bit data with 3-byte or 4-byte data for
24-bit or 32-bit data respectively.  The 2nd byte format
(also named MSB) always uses the second byte of the
2, 3, or 4-byte data.


.header level 2;ASlink V3.xx Error Messages

The linker provides detailed error messages allowing the programmer
to quickly find the errant code.  As the linker completes pass#1 over
the input file(s) it reports any page boundary or page length errors
as follows:
.tp 6;.skip
.literal
?ASlink-Warning-Paged Area PAGE0 Boundary Error

and/or

?ASlink-Warning-Paged Area PAGE0 Length Error
.end literal
.skip
where PAGE0 is the paged area.

During Pass two the linker reads the T, R, and P lines performing the
necessary relocations and outputting the absolute code.  Various 
errors may be reported during this process

.tp 10
The P line processing can produce only one possible error:
.skip
.literal
?ASlink-Warning-Page Definition Boundary Error
         file        module      pgarea      pgoffset
  PgDef  t6809l      t6809l      PAGE0       0001
.end literal
.skip
The error message specifies the file and module where the .setdp
direct was issued and indicates the page area and the page offset
value determined after relocation.

.tp 12
.skip 2
The R line processing produces various errors:
.skip
.literal
?ASlink-Warning-Byte PCR relocation error for symbol  bra2
?ASlink-Warning-Unsigned Byte error for symbol  two56
?ASlink-Warning-Page0 relocation error for symbol  ltwo56
?ASlink-Warning-Page Mode relocation error for symbol  two56
?ASlink-Warning-Page Mode relocation error
?ASlink-Warning-2K Page relocation error
?ASlink-Warning-512K Page relocation error
.end literal
.skip
These error messages also specify the file, module, area, and
offset within the area of the code referencing (Refby) and
defining (Defin) the symbol:
.skip
.literal
?ASlink-Warning-Unsigned Byte error for symbol  two56
         file        module      area        offset
  Refby  t6800l      t6800l      DIRECT      0015
  Defin  tconst      tconst      .  .ABS.    0100
.end literal
.skip
If the symbol is defined in the same module as the
reference the linker is unable to report the symbol name.
The assembler listing file(s) should be examined at the
offset from the specified area to locate the offending code.

The errors are:
.list 1
.list element
The byte PCR error is caused by exceeding the pc relative byte
branch range.
.list element
The Unsigned byte error indicates an indexing value
was negative or larger than 255.
.list element
The Page0 error is generated if
the direct page variable is not in the page0 range of 0 to 255.
.list element
The page mode error is generated if the direct variable is not
within the current direct page (6809).
.list element
The 2K Page relocation error is generated if the destination
is not within the current 2K page (8051, DS8xCxxx).
.list element
The 512K Page relocation error is generated if the destination
is not within the current 512K page (DS80C390).
.end list

.subtitle ;INTEL IHX OUTPUT FORMAT
.page
.header level 1;Intel IHX Output Format (16-Bit)
.left margin 32
.indent -24
Record#Mark#Field####-##This field signifies the start of a record,
and consists of an ascii colon (:).
.skip 1
.indent -24
Record#Length#Field##-##This field consists of two ascii characters
which indicate the number of data bytes in this record. The characters
are the result of converting the number of bytes in binary to two
ascii characters, high digit first.  An End of File record contains
two ascii zeros in this field.
.skip 1
.indent -24
Load#Address#Field###-##This field consists of the four ascii characters
which result from converting the the binary value of the address in which
to begin loading this record. The order is as follows:
.skip 1
.indent 4
High digit of high byte of address.
.break
.indent 4
Low digit of high byte of address.
.break
.indent 4
High digit of low byte of address.
.break
.indent 4
Low digit of low byte of address.
.skip 1
In an End of File record this field consists of either four ascii
zeros or the program entry address.
.skip 1
.indent -24
Record#Type#Field####-##This field identifies the record type, which
is either 0 for data records or 1 for an End of File record.  It
consists of two ascii characters, with the high digit of the record type
first, followed by the low digit of the record type.
.skip 1
.indent -24
Data#Field###########-##This field consists of the actual data,
converted to two ascii characters, high digit first. There are no
data bytes in the End of File record.
.skip 1
.indent -24
Checksum#Field#######-##The checksum field is the 8 bit binary sum of
the record length field, the load address field, the record type field,
and the data field. This sum is then negated (2's complement) and converted
to two ascii characters, high digit first.
.left margin 8
.subtitle

.subtitle ;INTEL I86 OUTPUT FORMAT
.page
.header level 1;Intel I86 Output Format (24 or 32-Bit)
.left margin 32
.indent -24
Record#Mark#Field####-##This field signifies the start of a record,
and consists of an ascii colon (:).
.skip 1
.indent -24
Record#Length#Field##-##This field consists of two ascii characters
which indicate the number of data bytes in this record. The characters
are the result of converting the number of bytes in binary to two
ascii characters, high digit first.  An End of File record contains
two ascii zeros in this field.
.skip 1
.indent -24
Load#Address#Field###-##This field consists of the four ascii characters
which result from converting the the binary value of the address in which
to begin loading this record. The order is as follows:
.skip 1
.indent 4
High digit of high byte of address.
.break
.indent 4
Low digit of high byte of address.
.break
.indent 4
High digit of low byte of address.
.break
.indent 4
Low digit of low byte of address.
.skip 1
In an End of File record this field consists of either four ascii
zeros or the program entry address.
.skip 1
.indent -24
Record#Type#Field####-##This field identifies the record type, which
is either 0 for data records, 1 for an End of File record, or 4
for a segment record.  It consists of two ascii characters,
with the high digit of the record type
first, followed by the low digit of the record type.
.skip 1
.indent -24
Data#Field###########-##This field consists of the actual data,
converted to two ascii characters, high digit first. There are no
data bytes in the End of File record.
.skip 1
.indent -24
Checksum#Field#######-##The checksum field is the 8 bit binary sum of
the record length field, the load address field, the record type field,
and the data field. This sum is then negated (2's complement) and converted
to two ascii characters, high digit first.
.left margin 8
.subtitle

.subtitle ;MOTOROLA S1-S9 OUTPUT FORMAT
.page
.header level 1;Motorla S1-S9 Output Format (16-Bit)
.left margin 32
.indent -24
Record#Type#Field####-##This field signifies the start of a record
and identifies the the record type as follows:
.skip 1
.indent 4
Ascii S1 - Data Record
.break
.indent 4
Ascii S9 - End of File Record
.skip 1
.indent -24
Record#Length#Field##-##This field specifies the record length
which includes the address, data, and checksum fields.
The 8 bit record length value is converted to two
ascii characters, high digit first.
.skip 1
.indent -24
Load#Address#Field###-##This field consists of the four ascii characters
which result from converting the the binary value of the address in which
to begin loading this record. The order is as follows:
.skip 1
.indent 4
High digit of high byte of address.
.break
.indent 4
Low digit of high byte of address.
.break
.indent 4
High digit of low byte of address.
.break
.indent 4
Low digit of low byte of address.
.skip 1
In an End of File record this field consists of either four ascii
zeros or the program entry address.
.skip 1
.indent -24
Data#Field###########-##This field consists of the actual data,
converted to two ascii characters, high digit first. There are no
data bytes in the End of File record.
.skip 1
.indent -24
Checksum#Field#######-##The checksum field is the 8 bit binary sum of
the record length field, the load address field,
and the data field. This sum is then complemented (1's complement)
and converted to two ascii characters, high digit first.
.left margin 8
.subtitle

.subtitle ;MOTOROLA S2-S8 OUTPUT FORMAT
.page
.header level 1;Motorla S2-S8 Output Format (24-Bit)
.left margin 32
.indent -24
Record#Type#Field####-##This field signifies the start of a record
and identifies the the record type as follows:
.skip 1
.indent 4
Ascii S2 - Data Record
.break
.indent 4
Ascii S8 - End of File Record
.skip 1
.indent -24
Record#Length#Field##-##This field specifies the record length
which includes the address, data, and checksum fields.
The 8 bit record length value is converted to two
ascii characters, high digit first.
.skip 1
.indent -24
Load#Address#Field###-##This field consists of the six ascii characters
which result from converting the the binary value of the address in which
to begin loading this record. The order is as follows:
.skip 1
.indent 4
High digit of 3rd byte of address.
.break
.indent 4
Low digit of 3rd byte of address.
.break
.indent 4
High digit of high byte of address.
.break
.indent 4
Low digit of high byte of address.
.break
.indent 4
High digit of low byte of address.
.break
.indent 4
Low digit of low byte of address.
.skip 1
In an End of File record this field consists of either six ascii
zeros or the program entry address.
.skip 1
.indent -24
Data#Field###########-##This field consists of the actual data,
converted to two ascii characters, high digit first. There are no
data bytes in the End of File record.
.skip 1
.indent -24
Checksum#Field#######-##The checksum field is the 8 bit binary sum of
the record length field, the load address field,
and the data field. This sum is then complemented (1's complement)
and converted to two ascii characters, high digit first.
.left margin 8
.subtitle

.subtitle ;MOTOROLA S3-S7 OUTPUT FORMAT
.page
.header level 1;Motorla S3-S7 Output Format (32-Bit)
.left margin 32
.indent -24
Record#Type#Field####-##This field signifies the start of a record
and identifies the the record type as follows:
.skip 1
.indent 4
Ascii S3 - Data Record
.break
.indent 4
Ascii S7 - End of File Record
.skip 1
.indent -24
Record#Length#Field##-##This field specifies the record length
which includes the address, data, and checksum fields.
The 8 bit record length value is converted to two
ascii characters, high digit first.
.skip 1
.indent -24
Load#Address#Field###-##This field consists of the eight ascii characters
which result from converting the the binary value of the address in which
to begin loading this record. The order is as follows:
.skip 1
.indent 4
High digit of 4th byte of address.
.break
.indent 4
Low digit of 4th byte of address.
.break
.indent 4
High digit of 3rd byte of address.
.break
.indent 4
Low digit of 3rd byte of address.
.break
.indent 4
High digit of high byte of address.
.break
.indent 4
Low digit of high byte of address.
.break
.indent 4
High digit of low byte of address.
.break
.indent 4
Low digit of low byte of address.
.skip 1
In an End of File record this field consists of either eight ascii
zeros or the program entry address.
.skip 1
.indent -24
Data#Field###########-##This field consists of the actual data,
converted to two ascii characters, high digit first. There are no
data bytes in the End of File record.
.skip 1
.indent -24
Checksum#Field#######-##The checksum field is the 8 bit binary sum of
the record length field, the load address field,
and the data field. This sum is then complemented (1's complement)
and converted to two ascii characters, high digit first.
.left margin 8
.subtitle

.subtitle ;TANDY COLOR COMPUTER DISK BASIC BINARY FORMAT

.page
.header level 1;Tandy Color Computer Disk Basic Format
.left margin 32
.indent -24
Record#Preamble######-##This field is either $00 (for start of new
record) or $FF (for last record in file).
.skip 1
.indent -24
Record#Length#Field##-##This field specifies the number of data
bytes which follows the address field. The length is
in binary MSB to LSB order.
.skip 1
.indent 4
16-Bit Length   -  2-bytes
.break
.indent 4
24-Bit Length   -  3-bytes
.break
.indent 4
32-Bit Length   -  4-bytes
.skip 1
.indent -24
Load#Address#Field###-##This field consists of the address where
the record will be loaded into memory.  The address is in
binary MSB to LSB order.
.skip 1
.indent 4
16-Bit Address  -  2-bytes
.break
.indent 4
24-Bit Address  -  3-bytes
.break
.indent 4
32-Bit Address  -  4-bytes
.skip 1
.indent -24
Data#Field###########-##This field consists of the actual binary data.
.skip 1
.left margin 8

After the last code segment, a final record like the one above is
placed.  In this final segment, the Record Preamble is $FF, the
Record Length Field is $0000 and the Load Adress Field is the
execution address.

