.appendix AS68(HC[S])08 Assembler


.header level 1;Processor Specific Directives

  The MC68HC(S)08 processor is a superset of the MC6805
processors.  The AS6808 assembler supports the HC08, HCS08,
6805, and HC05 cores.

.header level 2;.\h\c08 Directive

.break
Format:
.skip;.indent 8
_.hc08
.skip
The .hc08 directive enables processing of only the HC08 specific
mnemonics. 6805/HC05/HCS08 mnemonics encountered without the
_.hc08 directive will be flagged with an 'o' error.

The .hc08 directive also selects the HC08 specific
cycles count output when the -c command line option is specified.


.header level 2;.\h\c\s08 Directive

.break
Format:
.skip;.indent 8
_.hcs08
.skip
The .hcs08 directive enables processing of the HCS08 specific
mnemonics.

The .hcs08 directive also selects the HCS08 specific
cycles count output when the -c command line option is specified.


.header level 2;.6805 Directive

.break
Format:
.skip;.indent 8
_.6805
.skip
The .6805 directive enables processing of only the 6805/HC05 specific
mnemonics. HC08/HCS08 mnemonics encountered without the
_.hc08/.hcs08 directives will be flagged with an 'o' error.

The .6805 directive also selects the MC6805 specific
cycles count output when the -c command line option is specified.


.header level 2;.\h\c05 Directive

.break
Format:
.skip;.indent 8
_.hc05
.skip
The .hc05 directive enables processing of only the 6805/HC05 specific
mnemonics. HC08/HCS08 mnemonics encountered without the
_.hc08/.hcs08 directives will be flagged with an 'o' error.

The .hc05 directive also selects the MC68HC05/146805 specific
cycles count output when the -c command line option is specified.


.header level 2;The .____.CPU. Variable

The value of the pre-defined symbol '.____.CPU.' corresponds
to the selected processor type.  The default value is 0
which corresponds to the default processor type.  The
following table lists the processor types and associated
values for the AS6808 assembler:

.skip 1
.literal
	Processor Type		  .__.CPU. Value
	--------------		  --------------
	    .hc08			 0
	    .hcs08			 1
	    .6805			 2
	    .hc05			 3
.end literal

.skip 1
  The variable '.____.CPU.' is by default defined as local
and will not be output to the created .rel file.  The
assembler command line options -g or -a will not cause the
local symbol to be output to the created .rel file.

  The assembler .globl directive may be used to change the
variable type to global causing its definition to be
output to the .rel file.  The inclusion of the definition
of the variable '.____.CPU.' might be a useful means of
validating that seperately assembled files have been
compiled for the same processor type.  The linker will
report an error for variables with multiple non equal
definitions.


.header level 1;68HC(S)08 Register Set

.break
The following is a list of the 68HC(S)08 registers used by AS6808:
.skip
.literal
	a	-	8-bit accumulator
	x	-	index register  <H:X>
	s	-	stack pointer
.end literal	


.header level 1;68HC(S)08 Instruction Set

The following tables list all 68HC(S)08 mnemonics recognized by the
AS6808 assembler. The designation [] refers to a required addressing mode
argument. The following list specifies the format for
each addressing mode supported by AS6808:

.skip
.literal
	#data		immediate data
			byte or word data

	*dir		direct page addressing
			(see .setdp directive)
			0 <= dir <= 255 

	,x		register indexed addressing
			zero offset

	offset,x	register indexed addressing
			  0 <= offset <= 255   --- byte mode
			256 <= offset <= 65535 --- word mode
			(an externally defined offset uses the
			 word mode)

	,x+		register indexed addressing
			zero offset with post increment

	offset,x+	register indexed addressing
			unsigned byte offset with post increment

	offset,s	stack pointer indexed addressing
			  0 <= offset <= 255   --- byte mode
			256 <= offset <= 65535 --- word mode
			(an externally defined offset uses the
			 word mode)

	ext		extended addressing

	label		branch label
.end literal

.skip
The terms data, dir, offset, and ext may all be expressions.

Note that not all addressing modes are valid with every instruction,
refer to the 68HC(S)08 technical data for valid modes.


.test page 14
.header level 2;Control Instructions

.literal
	clc		cli		daa		div
	mul		nop		nsa		psha
	pshh		pshx		pula		pulh
	pulx		rsp		rti		rts
	sec		sei		stop		swi
	tap		tax		tpa		tsx
	txa		txs		wait
.end literal

.test page 12
.header level 2;Bit Manipulation Instructions

.literal
	brset	#data,*dir,label
	brclr	#data,*dir,label

	bset	#data,*dir
	bclr	#data,*dir
.end literal


.test page 18
.header level 2;Branch Instructions

.literal
	bra	label		brn	label
	bhi	label		bls	label
	bcc	label		bcs	label
	bne	label		beq	label
	bhcc	label		bhcs	label
	bpl	label		bmi	label
	bmc	label		bms	label
	bil	label		bih	label
	bsr	label		bge	label
	blt	label		bgt	label
	ble	label
.end literal

.test page 13
.header level 2;Complex Branch Instructions

.literal
	cbeqa	[],label
	cbeqx	[],label
	cbeq	[],label
	dbnza	label
	dbnzx	label
	dbnz	[],label
.end literal

.test page 43
.header level 2;Read-Modify-Write Instructions

.literal
	nega			negx
	neg	[]

	coma			comx
	com	[]

	lsra			lsrx
	lsr	[]

	rora			rorx
	ror	[]

	asra			asrx
	asr	[]

	asla			aslx
	asl	[]

	lsla			lslx
	lsl	[]

	rola			rolx
	rol	[]

	deca			decx
	dec	[]

	inca			incx
	inc	[]

	tsta			tstx
	tst	[]

	clra			clrx
	clr	[]		clrh

	aix	#data

	ais	#data
.end literal


.test page 14
.header level 2;Register_\Memory Instructions

.literal
	sub	[]		cmp	[]
	sbc	[]		cpx	[]
	and	[]		bit	[]
	lda	[]		sta	[]
	eor	[]		adc	[]
	ora	[]		add	[]
	ldx	[]		stx	[]
.end literal

.test page 8
.header level 2;Double Operand Move Instruction

.literal
	mov	[],[]
.end literal

.test page 10
.header level 2;16-Bit <H:X> Index Register Instructions

.literal
	cphx	[]
	ldhx	[]
	sthx	[]
.end literal

.test page 8
.header level 2;Jump and Jump to Subroutine Instructions

.literal
	jmp	[]		jsr	[]
.end literal

